using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class E_PrefabCreate : MonoBehaviour {
    //足場地域設定用のBoxCollider
    private BoxCollider2D _b_Collider;
    //
    private GameObject _beginFloor;
    //
    private Vector3 _colliderSize;
    //
    private Vector3 _colliderMax;
    //
    private Vector3 _colliderMin;
    //
    public GameObject[] _floorPrfabs;
    //
    private Vector3[] _f_CreatePos;
    //
    private Vector3 _searchCenter;
    //
    private Vector3 _objectPosition;
    //
    private Collider2D[] _colliders;
    //
    private Collider2D _collider;
    //
    private Collider2D _nearestCollider;
    //各敵キャラのプレハブを格納
    public GameObject[] _enemyPrfabs;
    //スポーンポイント
    private Vector3[] _enemyPos;

    //作成する足場の数
    public int _f_CreateQuantity;
    //
    private float _x_Ran;
    //
    private float _y_Ran;
    //足場種類の選択用乱数
    private int _floorRan;
    //
    public float searchRadius = 5f;
    //
    private float _nearestDistance;
    //
    private float _distance;
    //
    private bool _f_CreatFlag;
    //スポーンポイントの数
    private int _floorCount;
    //敵種類の選択用乱数
    private int _enemyRan;

    void Awake() {
        _b_Collider = GetComponent<BoxCollider2D>();

        _colliderSize = _b_Collider.size;

        _colliderMax = (Vector3)transform.position + _colliderSize * 0.5f;
        _colliderMin = (Vector3)transform.position - _colliderSize * 0.5f;

        //足場地域設定用のBoxColliderを無効化
        _b_Collider.enabled = false;

        _f_CreatePos = new Vector3[_f_CreateQuantity];

        _beginFloor = GameObject.Find("Begin_BlockFloor");

        for (int i = 0; i < _f_CreateQuantity; i++) {
            for (; _f_CreatFlag == true;) {
                _f_CreatFlag = false;
                _x_Ran = Random.Range(_colliderMin.x, _colliderMax.x);
                _y_Ran = Random.Range(_colliderMin.y, _colliderMax.y);
                _f_CreatePos[i] = new Vector3(_x_Ran, _y_Ran, 0);

                // 検索の中心となる位置を取得
                _searchCenter = _beginFloor.transform.position;

                // 指定された範囲内にあるすべてのCollider2Dを取得
                _colliders = Physics2D.OverlapCircleAll(_searchCenter, searchRadius);

                // 最も近いオブジェクトとその距離を格納する変数の初期化
                _nearestCollider = null;
                _nearestDistance = float.MaxValue;

                // 各Collider2Dに対して最も近いオブジェクトを探索
                for (int n = 0; n < _colliders.Length; n++) {
                    _collider = _colliders[n];

                    // 現在の位置と最も近い点との距離を計算
                    _distance = Vector2.Distance(_searchCenter, _collider.ClosestPoint(_searchCenter));

                    // より近いオブジェクトが見つかった場合、最も近いオブジェクトを更新
                    if (_distance < _nearestDistance) {
                        _nearestCollider = _collider;
                        _nearestDistance = _distance;

                    }

                }

                // 最も近くにあるオブジェクトが見つかった場合
                if (_nearestCollider != null) {
                    // 最も近くにあるオブジェクトの座標を取得
                    _objectPosition = _nearestCollider.transform.position;
                    _f_CreatFlag = true;

                }

            }

            _floorRan = Random.Range(0, _floorPrfabs.Length);
            //インスタンス生成
            Instantiate(_floorPrfabs[_floorRan], _f_CreatePos[i], Quaternion.identity);

        }

        //ポップできる足場の数を取得する
        _floorCount = GameObject.FindGameObjectsWithTag("Floor").Length;
        //各オブジェクトの定義
        _enemyPos = new Vector3[_floorCount];

        for (int i = 0; i > _enemyPrfabs.Length; i++) {
            _enemyPrfabs[i] = new GameObject();

        }

    }

    void Start() {
        //各座標に配列に格納されているプレハブをランダムに生成する
        for (int i = 0; i <= _floorCount - 1 ; i++) {//<= , -1 Floorの足場が0可能性を考えて
            _enemyRan = Random.Range(0, _enemyPrfabs.Length);
            //出現座標を定める
            _enemyPos[i] = GameObject.FindGameObjectsWithTag("Floor")[i].transform.position;
            _enemyPos[i].y += 1f;
            //インスタンス生成
            Instantiate(_enemyPrfabs[_enemyRan], _enemyPos[i], Quaternion.identity);

        }

    }

}